/*
 * sandbox-client-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SandboxClientSdk);
  }
}(this, function(expect, SandboxClientSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Context9', function() {
      beforeEach(function() {
        instance = new SandboxClientSdk.Context9();
      });

      it('should create an instance of Context9', function() {
        // TODO: update the code to test Context9
        expect(instance).to.be.a(SandboxClientSdk.Context9);
      });

      it('should have the property transactionId (base name: "transaction_id")', function() {
        // TODO: update the code to test the property transactionId
        expect(instance).to.have.property('transactionId');
        // expect(instance.transactionId).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property bppId (base name: "bpp_id")', function() {
        // TODO: update the code to test the property bppId
        expect(instance).to.have.property('bppId');
        // expect(instance.bppId).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property messageId (base name: "message_id")', function() {
        // TODO: update the code to test the property messageId
        expect(instance).to.have.property('messageId');
        // expect(instance.messageId).to.be(expectedValueLiteral);
      });

      it('should have the property coreVersion (base name: "core_version")', function() {
        // TODO: update the code to test the property coreVersion
        expect(instance).to.have.property('coreVersion');
        // expect(instance.coreVersion).to.be(expectedValueLiteral);
      });

      it('should have the property bapId (base name: "bap_id")', function() {
        // TODO: update the code to test the property bapId
        expect(instance).to.have.property('bapId');
        // expect(instance.bapId).to.be(expectedValueLiteral);
      });

      it('should have the property domain (base name: "domain")', function() {
        // TODO: update the code to test the property domain
        expect(instance).to.have.property('domain');
        // expect(instance.domain).to.be(expectedValueLiteral);
      });

      it('should have the property bppUri (base name: "bpp_uri")', function() {
        // TODO: update the code to test the property bppUri
        expect(instance).to.have.property('bppUri');
        // expect(instance.bppUri).to.be(expectedValueLiteral);
      });

      it('should have the property action (base name: "action")', function() {
        // TODO: update the code to test the property action
        expect(instance).to.have.property('action');
        // expect(instance.action).to.be(expectedValueLiteral);
      });

      it('should have the property bapUri (base name: "bap_uri")', function() {
        // TODO: update the code to test the property bapUri
        expect(instance).to.have.property('bapUri');
        // expect(instance.bapUri).to.be(expectedValueLiteral);
      });

      it('should have the property key (base name: "key")', function() {
        // TODO: update the code to test the property key
        expect(instance).to.have.property('key');
        // expect(instance.key).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property parentOrderId (base name: "parent_order_id")', function() {
        // TODO: update the code to test the property parentOrderId
        expect(instance).to.have.property('parentOrderId');
        // expect(instance.parentOrderId).to.be(expectedValueLiteral);
      });

    });
  });

}));
