/*
 * sandbox-client-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {OrderStatusRequest} from '../model/OrderStatusRequest';

/**
* Status service.
* @module api/StatusApi
* @version 1.0
*/
export class StatusApi {

    /**
    * Constructs a new StatusApi. 
    * @alias module:api/StatusApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the onorderstatus operation.
     * @callback moduleapi/StatusApi~onorderstatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * on order status
     * @param {Number} orderIds Comma separated values
     * @param {module:api/StatusApi~onorderstatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    onorderstatus(orderIds, callback) {
      
      let postBody = null;
      // verify the required parameter 'orderIds' is set
      if (orderIds === undefined || orderIds === null) {
        throw new Error("Missing the required parameter 'orderIds' when calling onorderstatus");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'orderIds': orderIds
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v2/on_order_status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the orderStatus operation.
     * @callback moduleapi/StatusApi~orderStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * order Status
     * @param {Array.<module:model/OrderStatusRequest>} body 
     * @param {module:api/StatusApi~orderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orderStatus(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling orderStatus");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/order_status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}