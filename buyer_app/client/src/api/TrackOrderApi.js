/*
 * sandbox-client-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Ontrack} from '../model/Ontrack';
import {Track} from '../model/Track';
import {Trackrequest} from '../model/Trackrequest';

/**
* TrackOrder service.
* @module api/TrackOrderApi
* @version 1.0
*/
export class TrackOrderApi {

    /**
    * Constructs a new TrackOrderApi. 
    * @alias module:api/TrackOrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the ontrack operation.
     * @callback moduleapi/TrackOrderApi~ontrackCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ontrack>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * on track
     * @param {String} messageIds comma separated ids
     * @param {module:api/TrackOrderApi~ontrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    ontrack(messageIds, callback) {
      
      let postBody = null;
      // verify the required parameter 'messageIds' is set
      if (messageIds === undefined || messageIds === null) {
        throw new Error("Missing the required parameter 'messageIds' when calling ontrack");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'messageIds': messageIds
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Ontrack];

      return this.apiClient.callApi(
        '/v2/on_track', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the track operation.
     * @callback moduleapi/TrackOrderApi~trackCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Track>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * track
     * @param {Array.<module:model/Trackrequest>} body 
     * @param {module:api/TrackOrderApi~trackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    track(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling track");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Track];

      return this.apiClient.callApi(
        '/v2/track', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}