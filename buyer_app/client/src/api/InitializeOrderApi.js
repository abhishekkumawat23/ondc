/*
 * sandbox-client-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Initorder} from '../model/Initorder';
import {Initorderrequest} from '../model/Initorderrequest';
import {Oninit} from '../model/Oninit';

/**
* InitializeOrder service.
* @module api/InitializeOrderApi
* @version 1.0
*/
export class InitializeOrderApi {

    /**
    * Constructs a new InitializeOrderApi. 
    * @alias module:api/InitializeOrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the initorder operation.
     * @callback moduleapi/InitializeOrderApi~initorderCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Initorder>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * init order
     * @param {Array.<module:model/Initorderrequest>} body 
     * @param {module:api/InitializeOrderApi~initorderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    initorder(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling initorder");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Initorder];

      return this.apiClient.callApi(
        '/v2/initialize_order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the oninit operation.
     * @callback moduleapi/InitializeOrderApi~oninitCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Oninit>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * on init
     * @param {String} messageIds Comma separated message ids
     * @param {module:api/InitializeOrderApi~oninitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    oninit(messageIds, callback) {
      
      let postBody = null;
      // verify the required parameter 'messageIds' is set
      if (messageIds === undefined || messageIds === null) {
        throw new Error("Missing the required parameter 'messageIds' when calling oninit");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'messageIds': messageIds
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Oninit];

      return this.apiClient.callApi(
        '/v2/on_initialize_order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}