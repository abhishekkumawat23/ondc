/*
 * sandbox-client-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Filterparams} from '../model/Filterparams';
import {Onsearchbyproduct} from '../model/Onsearchbyproduct';
import {Searchbyproduct} from '../model/Searchbyproduct';
import {Searchbyproductrequest} from '../model/Searchbyproductrequest';

/**
* Search service.
* @module api/SearchApi
* @version 1.0
*/
export class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the filterparams operation.
     * @callback moduleapi/SearchApi~filterparamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Filterparams{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * filter params
     * @param {String} messageId 
     * @param {module:api/SearchApi~filterparamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filterparams(messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling filterparams");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'messageId': messageId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Filterparams;

      return this.apiClient.callApi(
        '/v1/getFilterParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the onsearch operation.
     * @callback moduleapi/SearchApi~onsearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Onsearchbyproduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * on search
     * @param {String} messageId 
     * @param {module:api/SearchApi~onsearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    onsearch(messageId, callback) {
      
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling onsearch");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'messageId': messageId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Onsearchbyproduct;

      return this.apiClient.callApi(
        '/v1/on_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchbyproduct operation.
     * @callback moduleapi/SearchApi~searchbyproductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Searchbyproduct{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search by product
     * @param {module:model/Searchbyproductrequest} body 
     * @param {module:api/SearchApi~searchbyproductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchbyproduct(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchbyproduct");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Searchbyproduct;

      return this.apiClient.callApi(
        '/v1/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}