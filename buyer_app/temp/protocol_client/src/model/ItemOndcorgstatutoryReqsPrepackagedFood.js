/*
 * ONDC Protocol API for retail (grocery, f&b)
 * ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.29
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ItemOndcorgstatutoryReqsPrepackagedFood model module.
 * @module model/ItemOndcorgstatutoryReqsPrepackagedFood
 * @version 1.0.29
 */
export class ItemOndcorgstatutoryReqsPrepackagedFood {
  /**
   * Constructs a new <code>ItemOndcorgstatutoryReqsPrepackagedFood</code>.
   * mandatory for category_id \&quot;Packaged food\&quot; - required attributes include the following - nutritional_info, additives_info, net_quantity; other attributes are required on case-by-case basis
   * @alias module:model/ItemOndcorgstatutoryReqsPrepackagedFood
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ItemOndcorgstatutoryReqsPrepackagedFood</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ItemOndcorgstatutoryReqsPrepackagedFood} obj Optional instance to populate.
   * @return {module:model/ItemOndcorgstatutoryReqsPrepackagedFood} The populated <code>ItemOndcorgstatutoryReqsPrepackagedFood</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ItemOndcorgstatutoryReqsPrepackagedFood();
      if (data.hasOwnProperty('ingredients_info'))
        obj.ingredientsInfo = ApiClient.convertToType(data['ingredients_info'], 'String');
      if (data.hasOwnProperty('nutritional_info'))
        obj.nutritionalInfo = ApiClient.convertToType(data['nutritional_info'], 'String');
      if (data.hasOwnProperty('additives_info'))
        obj.additivesInfo = ApiClient.convertToType(data['additives_info'], 'String');
      if (data.hasOwnProperty('manufacturer_or_packer_name'))
        obj.manufacturerOrPackerName = ApiClient.convertToType(data['manufacturer_or_packer_name'], 'String');
      if (data.hasOwnProperty('manufacturer_or_packer_address'))
        obj.manufacturerOrPackerAddress = ApiClient.convertToType(data['manufacturer_or_packer_address'], 'String');
      if (data.hasOwnProperty('brand_owner_name'))
        obj.brandOwnerName = ApiClient.convertToType(data['brand_owner_name'], 'String');
      if (data.hasOwnProperty('brand_owner_address'))
        obj.brandOwnerAddress = ApiClient.convertToType(data['brand_owner_address'], 'String');
      if (data.hasOwnProperty('brand_owner_FSSAI_logo'))
        obj.brandOwnerFSSAILogo = ApiClient.convertToType(data['brand_owner_FSSAI_logo'], 'String');
      if (data.hasOwnProperty('brand_owner_FSSAI_license_no'))
        obj.brandOwnerFSSAILicenseNo = ApiClient.convertToType(data['brand_owner_FSSAI_license_no'], 'String');
      if (data.hasOwnProperty('other_FSSAI_license_no'))
        obj.otherFSSAILicenseNo = ApiClient.convertToType(data['other_FSSAI_license_no'], 'String');
      if (data.hasOwnProperty('net_quantity'))
        obj.netQuantity = ApiClient.convertToType(data['net_quantity'], 'String');
      if (data.hasOwnProperty('importer_name'))
        obj.importerName = ApiClient.convertToType(data['importer_name'], 'String');
      if (data.hasOwnProperty('importer_address'))
        obj.importerAddress = ApiClient.convertToType(data['importer_address'], 'String');
      if (data.hasOwnProperty('importer_FSSAI_logo'))
        obj.importerFSSAILogo = ApiClient.convertToType(data['importer_FSSAI_logo'], 'String');
      if (data.hasOwnProperty('importer_FSSAI_license_no'))
        obj.importerFSSAILicenseNo = ApiClient.convertToType(data['importer_FSSAI_license_no'], 'String');
      if (data.hasOwnProperty('imported_product_country_of_origin'))
        obj.importedProductCountryOfOrigin = ApiClient.convertToType(data['imported_product_country_of_origin'], 'String');
      if (data.hasOwnProperty('other_importer_name'))
        obj.otherImporterName = ApiClient.convertToType(data['other_importer_name'], 'String');
      if (data.hasOwnProperty('other_importer_address'))
        obj.otherImporterAddress = ApiClient.convertToType(data['other_importer_address'], 'String');
      if (data.hasOwnProperty('other_premises'))
        obj.otherPremises = ApiClient.convertToType(data['other_premises'], 'String');
      if (data.hasOwnProperty('other_importer_country_of_origin'))
        obj.otherImporterCountryOfOrigin = ApiClient.convertToType(data['other_importer_country_of_origin'], 'String');
      if (data.hasOwnProperty('back_image_url'))
        obj.backImageUrl = ApiClient.convertToType(data['back_image_url'], 'String');
    }
    return obj;
  }
}

/**
 * list of ingredients (except single ingredient foods), can be shown as ingredient (with percentage); ingredient (with percentage);..) e.g. \"Puffed Rice (40%); Split Green Gram (20%); Ground Nuts (20%);..\"
 * @member {String} ingredientsInfo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.ingredientsInfo = undefined;

/**
 * nutritional info (can be shown as nutritional info (with unit, per standard unit, per serving);..) e.g. \"Energy(KCal) - (per 100kg) 420, (per serving 50g) 250; Protein(g) - (per 100kg) 12, (per serving 50g)6;..\"
 * @member {String} nutritionalInfo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.nutritionalInfo = undefined;

/**
 * food additives together with specific name or recognized International Numbering System (can be shown as additive1-name or number;additive2-name or number;..)
 * @member {String} additivesInfo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.additivesInfo = undefined;

/**
 * name of manufacturer or packer (for non-retail containers)
 * @member {String} manufacturerOrPackerName
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.manufacturerOrPackerName = undefined;

/**
 * address of manufacturer or packer (for non-retail containers)
 * @member {String} manufacturerOrPackerAddress
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.manufacturerOrPackerAddress = undefined;

/**
 * name of brand owner
 * @member {String} brandOwnerName
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.brandOwnerName = undefined;

/**
 * address of brand owner
 * @member {String} brandOwnerAddress
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.brandOwnerAddress = undefined;

/**
 * FSSAI logo of brand owner (url based image e.g. uri:http://path/to/image)
 * @member {String} brandOwnerFSSAILogo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.brandOwnerFSSAILogo = undefined;

/**
 * FSSAI license no of brand owner
 * @member {String} brandOwnerFSSAILicenseNo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.brandOwnerFSSAILicenseNo = undefined;

/**
 * FSSAI license no of manufacturer or marketer or packer or bottler if different from brand owner
 * @member {String} otherFSSAILicenseNo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.otherFSSAILicenseNo = undefined;

/**
 * net quantity
 * @member {String} netQuantity
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.netQuantity = undefined;

/**
 * name of importer
 * @member {String} importerName
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.importerName = undefined;

/**
 * address of importer
 * @member {String} importerAddress
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.importerAddress = undefined;

/**
 * FSSAI logo of importer (url based image e.g. uri:http://path/to/image)
 * @member {String} importerFSSAILogo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.importerFSSAILogo = undefined;

/**
 * FSSAI license no of importer
 * @member {String} importerFSSAILicenseNo
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.importerFSSAILicenseNo = undefined;

/**
 * country of origin for imported products (ISO 3166 Alpha-3 code format)
 * @member {String} importedProductCountryOfOrigin
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.importedProductCountryOfOrigin = undefined;

/**
 * name of importer for product manufactured outside but packaged or bottled in India
 * @member {String} otherImporterName
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.otherImporterName = undefined;

/**
 * address of importer for product manufactured outside but packaged or bottled in India
 * @member {String} otherImporterAddress
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.otherImporterAddress = undefined;

/**
 * premises where product manufactured outside are packaged or bottled in India
 * @member {String} otherPremises
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.otherPremises = undefined;

/**
 * country of origin for product manufactured outside but packaged or bottled in India (ISO 3166 Alpha-3 code format)
 * @member {String} otherImporterCountryOfOrigin
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.otherImporterCountryOfOrigin = undefined;

/**
 * back image URL for statutory requirements
 * @member {String} backImageUrl
 */
ItemOndcorgstatutoryReqsPrepackagedFood.prototype.backImageUrl = undefined;

