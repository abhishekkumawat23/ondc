/*
 * ONDC Protocol API for retail (grocery, f&b)
 * ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.29
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OndcProtocolApiForRetailGroceryFb);
  }
}(this, function(expect, OndcProtocolApiForRetailGroceryFb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Cancellation', function() {
      beforeEach(function() {
        instance = new OndcProtocolApiForRetailGroceryFb.Cancellation();
      });

      it('should create an instance of Cancellation', function() {
        // TODO: update the code to test Cancellation
        expect(instance).to.be.a(OndcProtocolApiForRetailGroceryFb.Cancellation);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property refId (base name: "ref_id")', function() {
        // TODO: update the code to test the property refId
        expect(instance).to.have.property('refId');
        // expect(instance.refId).to.be(expectedValueLiteral);
      });

      it('should have the property policies (base name: "policies")', function() {
        // TODO: update the code to test the property policies
        expect(instance).to.have.property('policies');
        // expect(instance.policies).to.be(expectedValueLiteral);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property cancelledBy (base name: "cancelled_by")', function() {
        // TODO: update the code to test the property cancelledBy
        expect(instance).to.have.property('cancelledBy');
        // expect(instance.cancelledBy).to.be(expectedValueLiteral);
      });

      it('should have the property reasons (base name: "reasons")', function() {
        // TODO: update the code to test the property reasons
        expect(instance).to.have.property('reasons');
        // expect(instance.reasons).to.be(expectedValueLiteral);
      });

      it('should have the property selectedReason (base name: "selected_reason")', function() {
        // TODO: update the code to test the property selectedReason
        expect(instance).to.have.property('selectedReason');
        // expect(instance.selectedReason).to.be(expectedValueLiteral);
      });

      it('should have the property additionalDescription (base name: "additional_description")', function() {
        // TODO: update the code to test the property additionalDescription
        expect(instance).to.have.property('additionalDescription');
        // expect(instance.additionalDescription).to.be(expectedValueLiteral);
      });

    });
  });

}));
