/*
 * ONDC Protocol API for logistics
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.9
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OndcProtocolApiForLogistics);
  }
}(this, function(expect, OndcProtocolApiForLogistics) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PaymentOndcorgcodsettlementDetails', function() {
      beforeEach(function() {
        instance = new OndcProtocolApiForLogistics.PaymentOndcorgcodsettlementDetails();
      });

      it('should create an instance of PaymentOndcorgcodsettlementDetails', function() {
        // TODO: update the code to test PaymentOndcorgcodsettlementDetails
        expect(instance).to.be.a(OndcProtocolApiForLogistics.PaymentOndcorgcodsettlementDetails);
      });

      it('should have the property settlementCounterparty (base name: "settlement_counterparty")', function() {
        // TODO: update the code to test the property settlementCounterparty
        expect(instance).to.have.property('settlementCounterparty');
        // expect(instance.settlementCounterparty).to.be(expectedValueLiteral);
      });

      it('should have the property settlementType (base name: "settlement_type")', function() {
        // TODO: update the code to test the property settlementType
        expect(instance).to.have.property('settlementType');
        // expect(instance.settlementType).to.be(expectedValueLiteral);
      });

      it('should have the property settlementBankAccountNo (base name: "settlement_bank_account_no")', function() {
        // TODO: update the code to test the property settlementBankAccountNo
        expect(instance).to.have.property('settlementBankAccountNo');
        // expect(instance.settlementBankAccountNo).to.be(expectedValueLiteral);
      });

      it('should have the property settlementIfscCode (base name: "settlement_ifsc_code")', function() {
        // TODO: update the code to test the property settlementIfscCode
        expect(instance).to.have.property('settlementIfscCode');
        // expect(instance.settlementIfscCode).to.be(expectedValueLiteral);
      });

      it('should have the property upiAddress (base name: "upi_address")', function() {
        // TODO: update the code to test the property upiAddress
        expect(instance).to.have.property('upiAddress');
        // expect(instance.upiAddress).to.be(expectedValueLiteral);
      });

      it('should have the property settlementStatus (base name: "settlement_status")', function() {
        // TODO: update the code to test the property settlementStatus
        expect(instance).to.have.property('settlementStatus');
        // expect(instance.settlementStatus).to.be(expectedValueLiteral);
      });

      it('should have the property settlementReference (base name: "settlement_reference")', function() {
        // TODO: update the code to test the property settlementReference
        expect(instance).to.have.property('settlementReference');
        // expect(instance.settlementReference).to.be(expectedValueLiteral);
      });

      it('should have the property settlementTimestamp (base name: "settlement_timestamp")', function() {
        // TODO: update the code to test the property settlementTimestamp
        expect(instance).to.have.property('settlementTimestamp');
        // expect(instance.settlementTimestamp).to.be(expectedValueLiteral);
      });

    });
  });

}));
