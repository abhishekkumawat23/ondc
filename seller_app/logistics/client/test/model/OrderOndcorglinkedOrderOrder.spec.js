/*
 * ONDC Protocol API for logistics
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.9
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OndcProtocolApiForLogistics);
  }
}(this, function(expect, OndcProtocolApiForLogistics) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderOndcorglinkedOrderOrder', function() {
      beforeEach(function() {
        instance = new OndcProtocolApiForLogistics.OrderOndcorglinkedOrderOrder();
      });

      it('should create an instance of OrderOndcorglinkedOrderOrder', function() {
        // TODO: update the code to test OrderOndcorglinkedOrderOrder
        expect(instance).to.be.a(OndcProtocolApiForLogistics.OrderOndcorglinkedOrderOrder);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property dimensions (base name: "dimensions")', function() {
        // TODO: update the code to test the property dimensions
        expect(instance).to.have.property('dimensions');
        // expect(instance.dimensions).to.be(expectedValueLiteral);
      });

      it('should have the property declaredValue (base name: "declared_value")', function() {
        // TODO: update the code to test the property declaredValue
        expect(instance).to.have.property('declaredValue');
        // expect(instance.declaredValue).to.be(expectedValueLiteral);
      });

      it('should have the property taxableValue (base name: "taxable_value")', function() {
        // TODO: update the code to test the property taxableValue
        expect(instance).to.have.property('taxableValue');
        // expect(instance.taxableValue).to.be(expectedValueLiteral);
      });

      it('should have the property hsnCode (base name: "hsn_code")', function() {
        // TODO: update the code to test the property hsnCode
        expect(instance).to.have.property('hsnCode');
        // expect(instance.hsnCode).to.be(expectedValueLiteral);
      });

      it('should have the property sgstAmount (base name: "sgst_amount")', function() {
        // TODO: update the code to test the property sgstAmount
        expect(instance).to.have.property('sgstAmount');
        // expect(instance.sgstAmount).to.be(expectedValueLiteral);
      });

      it('should have the property cgstAmount (base name: "cgst_amount")', function() {
        // TODO: update the code to test the property cgstAmount
        expect(instance).to.have.property('cgstAmount');
        // expect(instance.cgstAmount).to.be(expectedValueLiteral);
      });

      it('should have the property igstAmount (base name: "igst_amount")', function() {
        // TODO: update the code to test the property igstAmount
        expect(instance).to.have.property('igstAmount');
        // expect(instance.igstAmount).to.be(expectedValueLiteral);
      });

    });
  });

}));
