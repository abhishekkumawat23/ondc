/*
 * ONDC Protocol API for retail (grocery, f&b)
 * ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.13
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Address} from './Address';
import {Circle} from './Circle';
import {City} from './City';
import {Country} from './Country';
import {Descriptor} from './Descriptor';
import {Gps} from './Gps';
import {LocationId} from './LocationId';
import {Time} from './Time';

/**
 * The Location model module.
 * @module model/Location
 * @version 1.0.13
 */
export class Location {
  /**
   * Constructs a new <code>Location</code>.
   * Describes the location of a runtime object.
   * @alias module:model/Location
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Location} obj Optional instance to populate.
   * @return {module:model/Location} The populated <code>Location</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Location();
      if (data.hasOwnProperty('id'))
        obj.id = LocationId.constructFromObject(data['id']);
      if (data.hasOwnProperty('descriptor'))
        obj.descriptor = Descriptor.constructFromObject(data['descriptor']);
      if (data.hasOwnProperty('gps'))
        obj.gps = Gps.constructFromObject(data['gps']);
      if (data.hasOwnProperty('address'))
        obj.address = Address.constructFromObject(data['address']);
      if (data.hasOwnProperty('station_code'))
        obj.stationCode = ApiClient.convertToType(data['station_code'], 'String');
      if (data.hasOwnProperty('city'))
        obj.city = City.constructFromObject(data['city']);
      if (data.hasOwnProperty('country'))
        obj.country = Country.constructFromObject(data['country']);
      if (data.hasOwnProperty('circle'))
        obj.circle = Circle.constructFromObject(data['circle']);
      if (data.hasOwnProperty('polygon'))
        obj.polygon = ApiClient.convertToType(data['polygon'], 'String');
      if (data.hasOwnProperty('3dspace'))
        obj._3dspace = ApiClient.convertToType(data['3dspace'], 'String');
      if (data.hasOwnProperty('time'))
        obj.time = Time.constructFromObject(data['time']);
    }
    return obj;
  }
}

/**
 * @member {module:model/LocationId} id
 */
Location.prototype.id = undefined;

/**
 * @member {module:model/Descriptor} descriptor
 */
Location.prototype.descriptor = undefined;

/**
 * @member {module:model/Gps} gps
 */
Location.prototype.gps = undefined;

/**
 * @member {module:model/Address} address
 */
Location.prototype.address = undefined;

/**
 * @member {String} stationCode
 */
Location.prototype.stationCode = undefined;

/**
 * @member {module:model/City} city
 */
Location.prototype.city = undefined;

/**
 * @member {module:model/Country} country
 */
Location.prototype.country = undefined;

/**
 * @member {module:model/Circle} circle
 */
Location.prototype.circle = undefined;

/**
 * @member {String} polygon
 */
Location.prototype.polygon = undefined;

/**
 * @member {String} _3dspace
 */
Location.prototype._3dspace = undefined;

/**
 * @member {module:model/Time} time
 */
Location.prototype.time = undefined;

