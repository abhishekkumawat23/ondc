/*
 * ONDC Protocol API for retail (grocery, f&b)
 * ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.13
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Agent} from './Agent';
import {Contact} from './Contact';
import {FulfillmentCustomer} from './FulfillmentCustomer';
import {FulfillmentEnd} from './FulfillmentEnd';
import {FulfillmentId} from './FulfillmentId';
import {FulfillmentStart} from './FulfillmentStart';
import {Person} from './Person';
import {ProviderId} from './ProviderId';
import {Rateable} from './Rateable';
import {RatingValue} from './RatingValue';
import {State} from './State';
import {Tags} from './Tags';
import {Vehicle} from './Vehicle';

/**
 * The Fulfillment model module.
 * @module model/Fulfillment
 * @version 1.0.13
 */
export class Fulfillment {
  /**
   * Constructs a new <code>Fulfillment</code>.
   * Describes how a single product/service will be rendered/fulfilled to the end customer - (id, type) have the following values - (\&quot;1\&quot;, \&quot;Delivery\&quot;) (\&quot;2\&quot;, \&quot;Pickup\&quot;) (\&quot;3\&quot;, \&quot;Delivery and Pickup\&quot;) State can have following values - \&quot;Searching-for-Agent\&quot;, \&quot;Assigned-Agent\&quot;, \&quot;En-route-to-drop\&quot;, \&quot;At-pickup-location\&quot;, \&quot;At-drop-location\&quot;, \&quot;Delivered-package\&quot;, \&quot;Cancelled-package\&quot;, \&quot;Returned-package\&quot;
   * @alias module:model/Fulfillment
   * @class
   * @param id {module:model/FulfillmentId} 
   * @param type {module:model/Fulfillment.TypeEnum} This describes the type of fulfillment (\"Pickup\" - Buyer picks up from store by themselves or through their logistics provider; \"Delivery\" - seller delivers to buyer)
   */
  constructor(id, type) {
    this.id = id;
    this.type = type;
  }

  /**
   * Constructs a <code>Fulfillment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Fulfillment} obj Optional instance to populate.
   * @return {module:model/Fulfillment} The populated <code>Fulfillment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Fulfillment();
      if (data.hasOwnProperty('id'))
        obj.id = FulfillmentId.constructFromObject(data['id']);
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('@ondc/org/category'))
        obj.ondcorgcategory = ApiClient.convertToType(data['@ondc/org/category'], 'String');
      if (data.hasOwnProperty('@ondc/org/TAT'))
        obj.ondcorgTAT = ApiClient.convertToType(data['@ondc/org/TAT'], 'String');
      if (data.hasOwnProperty('provider_id'))
        obj.providerId = ProviderId.constructFromObject(data['provider_id']);
      if (data.hasOwnProperty('@ondc/org/provider_name'))
        obj.ondcorgproviderName = ApiClient.convertToType(data['@ondc/org/provider_name'], 'String');
      if (data.hasOwnProperty('rating'))
        obj.rating = RatingValue.constructFromObject(data['rating']);
      if (data.hasOwnProperty('state'))
        obj.state = State.constructFromObject(data['state']);
      if (data.hasOwnProperty('tracking'))
        obj.tracking = ApiClient.convertToType(data['tracking'], 'Boolean');
      if (data.hasOwnProperty('customer'))
        obj.customer = FulfillmentCustomer.constructFromObject(data['customer']);
      if (data.hasOwnProperty('agent'))
        obj.agent = Agent.constructFromObject(data['agent']);
      if (data.hasOwnProperty('person'))
        obj.person = Person.constructFromObject(data['person']);
      if (data.hasOwnProperty('contact'))
        obj.contact = Contact.constructFromObject(data['contact']);
      if (data.hasOwnProperty('vehicle'))
        obj.vehicle = Vehicle.constructFromObject(data['vehicle']);
      if (data.hasOwnProperty('start'))
        obj.start = FulfillmentStart.constructFromObject(data['start']);
      if (data.hasOwnProperty('end'))
        obj.end = FulfillmentEnd.constructFromObject(data['end']);
      if (data.hasOwnProperty('rateable'))
        obj.rateable = Rateable.constructFromObject(data['rateable']);
      if (data.hasOwnProperty('tags'))
        obj.tags = Tags.constructFromObject(data['tags']);
    }
    return obj;
  }
}

/**
 * @member {module:model/FulfillmentId} id
 */
Fulfillment.prototype.id = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Fulfillment.TypeEnum = {
  /**
   * value: "Delivery"
   * @const
   */
  delivery: "Delivery",

  /**
   * value: "Pickup"
   * @const
   */
  pickup: "Pickup",

  /**
   * value: "Delivery and Pickup"
   * @const
   */
  deliveryAndPickup: "Delivery and Pickup"
};
/**
 * This describes the type of fulfillment (\"Pickup\" - Buyer picks up from store by themselves or through their logistics provider; \"Delivery\" - seller delivers to buyer)
 * @member {module:model/Fulfillment.TypeEnum} type
 */
Fulfillment.prototype.type = undefined;

/**
 * Fulfillment Category
 * @member {String} ondcorgcategory
 */
Fulfillment.prototype.ondcorgcategory = undefined;

/**
 * fulfillment turnaround time in ISO8601 durations format e.g. 'PT24H' indicates 24 hour TAT
 * @member {String} ondcorgTAT
 */
Fulfillment.prototype.ondcorgTAT = undefined;

/**
 * @member {module:model/ProviderId} providerId
 */
Fulfillment.prototype.providerId = undefined;

/**
 * @member {String} ondcorgproviderName
 */
Fulfillment.prototype.ondcorgproviderName = undefined;

/**
 * @member {module:model/RatingValue} rating
 */
Fulfillment.prototype.rating = undefined;

/**
 * @member {module:model/State} state
 */
Fulfillment.prototype.state = undefined;

/**
 * Indicates whether the fulfillment allows tracking
 * @member {Boolean} tracking
 * @default false
 */
Fulfillment.prototype.tracking = false;

/**
 * @member {module:model/FulfillmentCustomer} customer
 */
Fulfillment.prototype.customer = undefined;

/**
 * @member {module:model/Agent} agent
 */
Fulfillment.prototype.agent = undefined;

/**
 * @member {module:model/Person} person
 */
Fulfillment.prototype.person = undefined;

/**
 * @member {module:model/Contact} contact
 */
Fulfillment.prototype.contact = undefined;

/**
 * @member {module:model/Vehicle} vehicle
 */
Fulfillment.prototype.vehicle = undefined;

/**
 * @member {module:model/FulfillmentStart} start
 */
Fulfillment.prototype.start = undefined;

/**
 * @member {module:model/FulfillmentEnd} end
 */
Fulfillment.prototype.end = undefined;

/**
 * @member {module:model/Rateable} rateable
 */
Fulfillment.prototype.rateable = undefined;

/**
 * @member {module:model/Tags} tags
 */
Fulfillment.prototype.tags = undefined;

