/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The Authorization model module.
 * @module model/Authorization
 * @version 1.0.0
 */
export class Authorization {
  /**
   * Constructs a new <code>Authorization</code>.
   * Describes an authorization mechanism
   * @alias module:model/Authorization
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Authorization</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Authorization} obj Optional instance to populate.
   * @return {module:model/Authorization} The populated <code>Authorization</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Authorization();
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('token'))
        obj.token = ApiClient.convertToType(data['token'], 'String');
      if (data.hasOwnProperty('valid_from'))
        obj.validFrom = ApiClient.convertToType(data['valid_from'], 'Date');
      if (data.hasOwnProperty('valid_to'))
        obj.validTo = ApiClient.convertToType(data['valid_to'], 'Date');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
    }
    return obj;
  }
}

/**
 * Type of authorization mechanism used
 * @member {String} type
 */
Authorization.prototype.type = undefined;

/**
 * Token used for authorization
 * @member {String} token
 */
Authorization.prototype.token = undefined;

/**
 * Timestamp in RFC3339 format from which token is valid
 * @member {Date} validFrom
 */
Authorization.prototype.validFrom = undefined;

/**
 * Timestamp in RFC3339 format until which token is valid
 * @member {Date} validTo
 */
Authorization.prototype.validTo = undefined;

/**
 * Status of the token
 * @member {String} status
 */
Authorization.prototype.status = undefined;

