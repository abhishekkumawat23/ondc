/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OndcProtocolCoreApi);
  }
}(this, function(expect, OndcProtocolCoreApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ItemQuantity', function() {
      beforeEach(function() {
        instance = new OndcProtocolCoreApi.ItemQuantity();
      });

      it('should create an instance of ItemQuantity', function() {
        // TODO: update the code to test ItemQuantity
        expect(instance).to.be.a(OndcProtocolCoreApi.ItemQuantity);
      });

      it('should have the property allocated (base name: "allocated")', function() {
        // TODO: update the code to test the property allocated
        expect(instance).to.have.property('allocated');
        // expect(instance.allocated).to.be(expectedValueLiteral);
      });

      it('should have the property available (base name: "available")', function() {
        // TODO: update the code to test the property available
        expect(instance).to.have.property('available');
        // expect(instance.available).to.be(expectedValueLiteral);
      });

      it('should have the property maximum (base name: "maximum")', function() {
        // TODO: update the code to test the property maximum
        expect(instance).to.have.property('maximum');
        // expect(instance.maximum).to.be(expectedValueLiteral);
      });

      it('should have the property minimum (base name: "minimum")', function() {
        // TODO: update the code to test the property minimum
        expect(instance).to.have.property('minimum');
        // expect(instance.minimum).to.be(expectedValueLiteral);
      });

      it('should have the property selected (base name: "selected")', function() {
        // TODO: update the code to test the property selected
        expect(instance).to.have.property('selected');
        // expect(instance.selected).to.be(expectedValueLiteral);
      });

    });
  });

}));
