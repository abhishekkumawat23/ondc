/*
 * ONDC Registry 
 * ONDC Participant Management API
 *
 * OpenAPI spec version: 2.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OndcRegistry_);
  }
}(this, function(expect, OndcRegistry_) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2003', function() {
      beforeEach(function() {
        instance = new OndcRegistry_.InlineResponse2003();
      });

      it('should create an instance of InlineResponse2003', function() {
        // TODO: update the code to test InlineResponse2003
        expect(instance).to.be.a(OndcRegistry_.InlineResponse2003);
      });

      it('should have the property subscriberId (base name: "subscriber_id")', function() {
        // TODO: update the code to test the property subscriberId
        expect(instance).to.have.property('subscriberId');
        // expect(instance.subscriberId).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property signingPublicKey (base name: "signing_public_key")', function() {
        // TODO: update the code to test the property signingPublicKey
        expect(instance).to.have.property('signingPublicKey');
        // expect(instance.signingPublicKey).to.be(expectedValueLiteral);
      });

      it('should have the property encrPublicKey (base name: "encr_public_key")', function() {
        // TODO: update the code to test the property encrPublicKey
        expect(instance).to.have.property('encrPublicKey');
        // expect(instance.encrPublicKey).to.be(expectedValueLiteral);
      });

      it('should have the property validFrom (base name: "valid_from")', function() {
        // TODO: update the code to test the property validFrom
        expect(instance).to.have.property('validFrom');
        // expect(instance.validFrom).to.be(expectedValueLiteral);
      });

      it('should have the property validUntil (base name: "valid_until")', function() {
        // TODO: update the code to test the property validUntil
        expect(instance).to.have.property('validUntil');
        // expect(instance.validUntil).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueKeyId (base name: "unique_key_id")', function() {
        // TODO: update the code to test the property uniqueKeyId
        expect(instance).to.have.property('uniqueKeyId');
        // expect(instance.uniqueKeyId).to.be(expectedValueLiteral);
      });

      it('should have the property networkParticipant (base name: "network_participant")', function() {
        // TODO: update the code to test the property networkParticipant
        expect(instance).to.have.property('networkParticipant');
        // expect(instance.networkParticipant).to.be(expectedValueLiteral);
      });

    });
  });

}));
