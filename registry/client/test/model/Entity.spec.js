/*
 * ONDC Registry 
 * ONDC Participant Management API
 *
 * OpenAPI spec version: 2.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OndcRegistry_);
  }
}(this, function(expect, OndcRegistry_) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Entity', function() {
      beforeEach(function() {
        instance = new OndcRegistry_.Entity();
      });

      it('should create an instance of Entity', function() {
        // TODO: update the code to test Entity
        expect(instance).to.be.a(OndcRegistry_.Entity);
      });

      it('should have the property gst (base name: "gst")', function() {
        // TODO: update the code to test the property gst
        expect(instance).to.have.property('gst');
        // expect(instance.gst).to.be(expectedValueLiteral);
      });

      it('should have the property pan (base name: "pan")', function() {
        // TODO: update the code to test the property pan
        expect(instance).to.have.property('pan');
        // expect(instance.pan).to.be(expectedValueLiteral);
      });

      it('should have the property nameOfAuthorisedSignatory (base name: "name_of_authorised_signatory")', function() {
        // TODO: update the code to test the property nameOfAuthorisedSignatory
        expect(instance).to.have.property('nameOfAuthorisedSignatory');
        // expect(instance.nameOfAuthorisedSignatory).to.be(expectedValueLiteral);
      });

      it('should have the property addressOfAuthorisedSignatory (base name: "address_of_authorised Signatory")', function() {
        // TODO: update the code to test the property addressOfAuthorisedSignatory
        expect(instance).to.have.property('addressOfAuthorisedSignatory');
        // expect(instance.addressOfAuthorisedSignatory).to.be(expectedValueLiteral);
      });

      it('should have the property emailId (base name: "email_id")', function() {
        // TODO: update the code to test the property emailId
        expect(instance).to.have.property('emailId');
        // expect(instance.emailId).to.be(expectedValueLiteral);
      });

      it('should have the property mobileNo (base name: "mobile_no")', function() {
        // TODO: update the code to test the property mobileNo
        expect(instance).to.have.property('mobileNo');
        // expect(instance.mobileNo).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property subscriberId (base name: "subscriber_id")', function() {
        // TODO: update the code to test the property subscriberId
        expect(instance).to.have.property('subscriberId');
        // expect(instance.subscriberId).to.be(expectedValueLiteral);
      });

      it('should have the property callbackUrl (base name: "callback_url")', function() {
        // TODO: update the code to test the property callbackUrl
        expect(instance).to.have.property('callbackUrl');
        // expect(instance.callbackUrl).to.be(expectedValueLiteral);
      });

      it('should have the property keyPair (base name: "key_pair")', function() {
        // TODO: update the code to test the property keyPair
        expect(instance).to.have.property('keyPair');
        // expect(instance.keyPair).to.be(expectedValueLiteral);
      });

    });
  });

}));
